{"version":3,"sources":["lib\\layout\\src\\FittableLayout\\FittableLayout.js","lib\\layout\\src\\FittableColumns.js","lib\\layout\\src\\FittableRows.js"],"names":[],"mappingsvYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/**\r\n* Contains the declaration for the {@link module:layout/FittableLayout~FittableLayout}, {@link module:layout/FittableLayout~FittableColumnsLayout}\r\n* and {@link module:layout/FittableLayout~FittableRowsLayout} kinds.\r\n* @module layout/FittableLayout\r\n*/\r\n\r\nvar\r\n\tkind = require('enyo/kind'),\r\n\tdom = require('enyo/dom'),\r\n\tControl = require('enyo/Control'),\r\n\tLayout = require('enyo/Layout');\r\n\r\nvar detector = document.createElement('div'),\r\n\tflexAvailable =\r\n\t\t(detector.style.flexBasis !== undefined) ||\r\n\t\t(detector.style.webkitFlexBasis !== undefined) ||\r\n\t\t(detector.style.mozFlexBasis !== undefined) ||\r\n\t\t(detector.style.msFlexBasis !== undefined);\r\n\r\n/**\r\n* {@link module:layout/FittableLayout~FittableLayout} provides the base\r\n* positioning and boundary logic for the fittable layout strategy. The fittable\r\n* layout strategy is based on laying out items in either a set of rows or a set\r\n* of columns, with most of the items having natural size, but one item expanding\r\n* to fill the remaining space. The item that expands is labeled with the\r\n* attribute `fit: true`.\r\n*\r\n* The subkinds {@link module:layout/FittableLayout~FittableColumnsLayout} and\r\n* {@link module:layout/FittableLayout~FittableRowsLayout} (or _their_ subkinds)\r\n* are used for layout rather than `FittableLayout` because they specify\r\n* properties that the framework expects to be available when laying items out.\r\n*\r\n* When available on the platform, you can opt-in to have `FittableLayout` use\r\n* CSS flexible box (flexbox) to implement fitting behavior on the platform for\r\n* better performance; Enyo will fall back to JavaScript-based layout on older\r\n* platforms. Three subtle differences between the flexbox and JavaScript\r\n* implementations should be noted:\r\n\r\n* - When using flexbox, vertical margins (i.e., `margin-top`, `margin-bottom`) will\r\n* not collapse; when using JavaScript layout, vertical margins will collapse according\r\n* to static layout rules.\r\n*\r\n* - When using flexbox, non-fitting children of the Fittable must not be sized\r\n* using percentages of the container (even if set to `position: relative`);\r\n* this is explicitly not supported by the flexbox 2013 spec.\r\n*\r\n* - The flexbox-based Fittable implementation will respect multiple children\r\n* with `fit: true` (the fitting space will be divided equally between them).\r\n* This is NOT supported by the JavaScript implementation, and you should not rely\r\n* upon this behavior if you are deploying to platforms without flexbox support.\r\n*\r\n* The flexbox implementation was added to Enyo 2.5.0 as an optional performance\r\n* optimization; to use the optimization, set `useFlex: true` on the Fittable\r\n* container.  This will cause flexbox to be used when possible.\r\n*\r\n* @class FittableLayout\r\n* @extends module:enyo/Layout~Layout\r\n* @public\r\n*/\r\nvar FittableLayout = module.exports = kind(/** @lends module:layout/FittableLayout~FittableLayout.prototype */{\r\n\tname: 'enyo.FittableLayout',\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tkind: Layout,\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tnoDefer: true,\r\n\r\n\t/**\r\n\t* @method\r\n\t* @private\r\n\t*/\r\n\tconstructor: function () {\r\n\t\tLayout.prototype._constructor.apply(this, arguments);\r\n\r\n\t\t// Add the force-ltr class if we're in RTL mode, but this control is set explicitly to NOT be in RTL mode.\r\n\t\tthis.container.addRemoveClass('force-left-to-right', (Control.prototype.rtl && !this.container.get('rtl')) );\r\n\r\n\t\t// Flexbox optimization is determined by global flexAvailable and per-instance opt-in useFlex flag\r\n\t\tthis.useFlex = flexAvailable && (this.container.useFlex === true);\r\n\t\tif (this.useFlex) {\r\n\t\t\tthis.container.addClass(this.flexLayoutClass);\r\n\t\t} else {\r\n\t\t\tthis.container.addClass(this.fitLayoutClass);\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tcalcFitIndex: function () {\r\n\t\tvar aChildren = this.container.children,\r\n\t\t\toChild,\r\n\t\t\tn;\r\n\r\n\t\tfor (n=0; n<aChildren.length; n++) {\r\n\t\t\toChild = aChildren[n];\r\n\t\t\tif (oChild.fit && oChild.showing) {\r\n\t\t\t\treturn n;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tgetFitControl: function () {\r\n\t\tvar aChildren = this.container.children,\r\n\t\t\toFitChild = aChildren[this.fitIndex];\r\n\r\n\t\tif (!(oFitChild && oFitChild.fit && oFitChild.showing)) {\r\n\t\t\tthis.fitIndex = this.calcFitIndex();\r\n\t\t\toFitChild = aChildren[this.fitIndex];\r\n\t\t}\r\n\t\treturn oFitChild;\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tshouldReverse: function () {\r\n\t\treturn this.container.rtl && this.orient === 'h';\r\n\t},\r\n\t\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tdestroy: function () {\r\n\t\tLayout.prototype.destroy.apply(this, arguments);\r\n\t\t\r\n\t\tif (this.container) {\r\n\t\t\tthis.container.removeClass(this.useFlex ? this.flexLayoutClass : this.fitLayoutClass);\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tgetFirstChild: function() {\r\n\t\tvar aChildren = this.getShowingChildren();\r\n\r\n\t\tif (this.shouldReverse()) {\r\n\t\t\treturn aChildren[aChildren.length - 1];\r\n\t\t} else {\r\n\t\t\treturn aChildren[0];\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tgetLastChild: function() {\r\n\t\tvar aChildren = this.getShowingChildren();\r\n\r\n\t\tif (this.shouldReverse()) {\r\n\t\t\treturn aChildren[0];\r\n\t\t} else {\r\n\t\t\treturn aChildren[aChildren.length - 1];\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tgetShowingChildren: function() {\r\n\t\tvar a = [],\r\n\t\t\tn = 0,\r\n\t\t\taChildren = this.container.children,\r\n\t\t\tnLength   = aChildren.length;\r\n\r\n\t\tfor (;n<nLength; n++) {\r\n\t\t\tif (aChildren[n].showing) {\r\n\t\t\t\ta.push(aChildren[n]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\t_reflow: function(sMeasureName, sClienMeasure, sAttrBefore, sAttrAfter) {\r\n\t\tthis.container.addRemoveClass('enyo-stretch', !this.container.noStretch);\r\n\t\t\r\n\t\tvar oFitChild       = this.getFitControl(),\r\n\t\t\toContainerNode  = this.container.hasNode(),  // Container node\r\n\t\t\tnTotalSize     = 0,                          // Total container width or height without padding\r\n\t\t\tnBeforeOffset   = 0,                         // Offset before fit child\r\n\t\t\tnAfterOffset    = 0,                         // Offset after fit child\r\n\t\t\toPadding,                                    // Object containing t,b,r,l paddings\r\n\t\t\toBounds,                                     // Bounds object of fit control\r\n\t\t\toLastChild,\r\n\t\t\toFirstChild,\r\n\t\t\tnFitSize;\r\n\r\n\t\tif (!oFitChild || !oContainerNode) { return true; }\r\n\r\n\t\toPadding   = dom.calcPaddingExtents(oContainerNode);\r\n\t\toBounds    = oFitChild.getBounds();\r\n\t\tnTotalSize = oContainerNode[sClienMeasure] - (oPadding[sAttrBefore] + oPadding[sAttrAfter]);\r\n\r\n\t\t// If total size is zero, there's nothing for us to do (and the Control\r\n\t\t// we're doing layout for is probably hidden). In this case, we\r\n\t\t// short-circuit and return `true` to signify that we want to reflow\r\n\t\t// again the next time the Control is shown.\r\n\t\tif (nTotalSize === 0) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.shouldReverse()) {\r\n\t\t\toFirstChild  = this.getFirstChild();\r\n\t\t\tnAfterOffset = nTotalSize - (oBounds[sAttrBefore] + oBounds[sMeasureName]);\r\n\r\n\t\t\tvar nMarginBeforeFirstChild = dom.getComputedBoxValue(oFirstChild.hasNode(), 'margin', sAttrBefore) || 0;\r\n\r\n\t\t\tif (oFirstChild == oFitChild) {\r\n\t\t\t\tnBeforeOffset = nMarginBeforeFirstChild;\r\n\t\t\t} else {\r\n\t\t\t\tvar oFirstChildBounds      = oFirstChild.getBounds(),\r\n\t\t\t\t\tnSpaceBeforeFirstChild = oFirstChildBounds[sAttrBefore] - (oPadding[sAttrBefore] || 0);\r\n\r\n\t\t\t\tnBeforeOffset = oBounds[sAttrBefore] + nMarginBeforeFirstChild - nSpaceBeforeFirstChild;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\toLastChild    = this.getLastChild();\r\n\t\t\tnBeforeOffset = oBounds[sAttrBefore] - (oPadding[sAttrBefore] || 0);\r\n\r\n\t\t\tvar nMarginAfterLastChild = dom.getComputedBoxValue(oLastChild.hasNode(), 'margin', sAttrAfter) || 0;\r\n\r\n\t\t\tif (oLastChild == oFitChild) {\r\n\t\t\t\tnAfterOffset = nMarginAfterLastChild;\r\n\t\t\t} else {\r\n\t\t\t\tvar oLastChildBounds = oLastChild.getBounds(),\r\n\t\t\t\t\tnFitChildEnd     = oBounds[sAttrBefore] + oBounds[sMeasureName],\r\n\t\t\t\t\tnLastChildEnd    = oLastChildBounds[sAttrBefore] + oLastChildBounds[sMeasureName] +  nMarginAfterLastChild;\r\n\r\n\t\t\t\tnAfterOffset = nLastChildEnd - nFitChildEnd;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tnFitSize = nTotalSize - (nBeforeOffset + nAfterOffset);\r\n\t\toFitChild.applyStyle(sMeasureName, nFitSize + 'px');\r\n\t},\r\n\r\n\t/**\r\n\t* Assigns any static layout properties not dependent on changes to the\r\n\t* rendered component or container sizes, etc.\r\n\t* \r\n\t* @public\r\n\t*/\r\n\tflow: function() {\r\n\t\tif (this.useFlex) {\r\n\t\t\tvar i,\r\n\t\t\t\tchildren = this.container.children,\r\n\t\t\t\tchild;\r\n\t\t\tthis.container.addClass(this.flexLayoutClass);\r\n\t\t\tthis.container.addRemoveClass('nostretch', this.container.noStretch);\r\n\t\t\tfor (i=0; i<children.length; i++) {\r\n\t\t\t\tchild = children[i];\r\n\t\t\t\tchild.addClass('enyo-flex-item');\r\n\t\t\t\tchild.addRemoveClass('flex', child.fit);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t* Updates the layout to reflect any changes made to the layout container or\r\n\t* the contained components.\r\n\t*\r\n\t* @public\r\n\t*/\r\n\treflow: function() {\r\n\t\tif (!this.useFlex) {\r\n\t\t\tif (this.orient == 'h') {\r\n\t\t\t\treturn this._reflow('width', 'clientWidth', 'left', 'right');\r\n\t\t\t} else {\r\n\t\t\t\treturn this._reflow('height', 'clientHeight', 'top', 'bottom');\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t* @private\r\n\t* @lends module:layout/FittableLayout~FittableLayout.prototype\r\n\t*/\r\n\tstatics: {\r\n\t\t/**\r\n\t\t* Indicates whether flexbox optimization can be used.\r\n\t\t*\r\n\t\t* @type {Boolean}\r\n\t\t* @default  false\r\n\t\t* @private\r\n\t\t*/\r\n\t\tflexAvailable: flexAvailable\r\n\t}\r\n});\r\n\r\n/**\r\n* {@link module:layout/FittableLayout~FittableColumnsLayout} provides a\r\n* container in which items are laid out in a set of vertical columns, with most\r\n* of the items having natural size, but one expanding to fill the remaining\r\n* space. The one that expands is labeled with the attribute `fit: true`.\r\n*\r\n* `FittableColumnsLayout` is meant to be used as a value for the `layoutKind`\r\n* property of other kinds. `layoutKind` provides a way to add layout behavior in\r\n* a pluggable fashion while retaining the ability to use a specific base kind.\r\n*\r\n* For more information, see the documentation on\r\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\r\n* Enyo Developer Guide.\r\n*\r\n* @class FittableColumnsLayout\r\n* @extends module:layout/FittableLayout~FittableLayout\r\n* @public\r\n*/\r\n\r\n/**\r\n* The declaration for {@link module:layout/FittableLayout~FittableColumnsLayout}\r\n*/\r\nmodule.exports.Columns = kind(/** @lends module:layout/FittableLayout~FittableColumnsLayout.prototype */{\r\n\tname        : 'enyo.FittableColumnsLayout',\r\n\tkind        : FittableLayout,\r\n\torient      : 'h',\r\n\tfitLayoutClass : 'enyo-fittable-columns-layout',\r\n\tflexLayoutClass: 'enyo-flex-container columns'\r\n});\r\n\r\n\r\n/**\r\n* {@link module:layout/FittableLayout~FittableRowsLayout} provides a container\r\n* in which items are laid out in a set of horizontal rows, with most of the\r\n* items having natural size, but one expanding to fill the remaining space. The\r\n* one that expands is labeled with the attribute `fit: true`.\r\n*\r\n* `FittableRowsLayout` is meant to be used as a value for the `layoutKind`\r\n* property of other kinds. `layoutKind` provides a way to add layout behavior in\r\n* a pluggable fashion while retaining the ability to use a specific base kind.\r\n*\r\n* For more information, see the documentation on\r\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\r\n* Enyo Developer Guide.\r\n*\r\n* @class FittableRowsLayout\r\n* @extends module:layout/FittableLayout~FittableLayout\r\n* @public\r\n*/\r\n\r\n/**\r\n* The declaration for {@link module:layout/FittableLayout~FittableRowsLayout}\r\n*/\r\nmodule.exports.Rows = kind(\r\n\t/** @lends module:layout/FittableLayout~FittableRowsLayout.prototype */ {\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tname        : 'enyo.FittableRowsLayout',\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tkind        : FittableLayout,\r\n\r\n\t/**\r\n\t* Layout CSS class used to fit rows.\r\n\t*\r\n\t* @type {String}\r\n\t* @default 'enyo-fittable-rows-layout'\r\n\t* @public\r\n\t*/\r\n\tfitLayoutClass : 'enyo-fittable-rows-layout',\r\n\r\n\t/**\r\n\t* The orientation of the layout.\r\n\t*\r\n\t* @type {String}\r\n\t* @default 'v'\r\n\t* @public\r\n\t*/\r\n\torient      : 'v',\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tflexLayoutClass: 'enyo-flex-container rows'\r\n});\r\n","/**\r\n* Contains the declaration for the {@link module:layout/FittableColumns~FittableColumns} kind.\r\n* @module layout/FittableColumns\r\n*/\r\n\r\nvar\r\n\tkind = require('enyo/kind');\r\n\r\nvar\r\n\tFittableLayout = require('./FittableLayout'),\r\n\tFittableColumnsLayout = FittableLayout.Columns;\r\n\r\n/**\r\n* {@link module:layout/FittableColumns~FittableColumns} provides a container in which items are laid out in a\r\n* set of vertical columns, with most items having natural size, but one\r\n* expanding to fill the remaining space. The one that expands is labeled with\r\n* the attribute `fit: true`.\r\n*\r\n* For more information, see the documentation on\r\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\r\n* Enyo Developer Guide.\r\n*\r\n* @class FittableColumns\r\n* @extends module:enyo/Control~Control\r\n* @ui\r\n* @public\r\n*/\r\nmodule.exports = kind(/** @lends module:layout/FittableColumns~FittableColumns.prototype */ {\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tname: 'enyo.FittableColumns',\r\n\r\n\t/**\r\n\t* A {@glossary kind} used to manage the size and placement of child\r\n\t* [components]{@link module:enyo/Component~Component}.\r\n\t*\r\n\t* @type {String}\r\n\t* @default ''\r\n\t* @private\r\n\t*/\r\n\tlayoutKind: FittableColumnsLayout,\r\n\r\n\t/**\r\n\t* By default, items in columns stretch to fit vertically; set to `true` to\r\n\t* avoid this behavior.\r\n\t*\r\n\t* @type {Boolean}\r\n\t* @default false\r\n\t* @public\r\n\t*/\r\n\tnoStretch: false\r\n});\r\n","/**\r\n* Contains the declaration for the {@link module:layout/FittableRows~FittableRows} kind.\r\n* @module layout/FittableRows\r\n*/\r\n\r\nvar\r\n\tkind = require('enyo/kind')\t;\r\n\r\nvar\r\n\tFittableLayout = require('./FittableLayout'),\r\n\tFittableRowsLayout = FittableLayout.Rows;\r\n\r\n/**\r\n* {@link module:layout/FittableRows~FittableRows} provides a container in which items are laid out in a\r\n* set\tof horizontal rows, with most of the items having natural size, but one\r\n* expanding to fill the remaining space. The one that expands is labeled with\r\n* the attribute `fit: true`.\r\n*\r\n* For more information, see the documentation on\r\n* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the\r\n* Enyo Developer Guide.\r\n*\r\n* @class FittableRows\r\n* @extends module:enyo/Control~Control\r\n* @ui\r\n* @public\r\n*/\r\nmodule.exports = kind(/** @lends module:layout/FittableRows~FittableRows.prototype */{\r\n\r\n\t/**\r\n\t* @private\r\n\t*/\r\n\tname: 'enyo.FittableRows',\r\n\r\n\t/**\r\n\t* A {@glossary kind} used to manage the size and placement of child\r\n\t* [components]{@link module:enyo/Component~Component}.\r\n\t*\r\n\t* @type {String}\r\n\t* @default ''\r\n\t* @private\r\n\t*/\r\n\tlayoutKind: FittableRowsLayout,\r\n\r\n\t/**\r\n\t* By default, items in columns stretch to fit horizontally; set to `true` to\r\n\t* avoid this behavior.\r\n\t*\r\n\t* @type {Boolean}\r\n\t* @default false\r\n\t* @public\r\n\t*/\r\n\tnoStretch: false\r\n});\r\n"]}